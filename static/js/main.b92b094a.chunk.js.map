{"version":3,"sources":["components/validate/validate.js","components/converter/Converter.jsx","App.js","reportWebVitals.js","index.js"],"names":["hex2rgb","c","result","exec","parseInt","Converter","useState","rgb","color","setColor","className","style","backgroundColor","onSubmit","e","preventDefault","type","name","onChange","target","value","length","prev","valid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAKeA,MALf,SAAiBC,GACb,IAAIC,EAAS,4CAA4CC,KAAKF,GAC9D,OAAOC,EAAM,cAAUE,SAASF,EAAO,GAAI,IAA9B,aAAsCE,SAASF,EAAO,GAAI,IAA1D,aAAkEE,SAASF,EAAO,GAAI,IAAtF,KAA+F,M,OC4BjGG,MA3Bf,WAAsB,IAAD,EACKC,mBAAS,CAC/BC,IAAK,KAFY,mBACdC,EADc,KACPC,EADO,KAiBjB,OACI,qBAAKC,UAAU,YAAYC,MAAO,CAACC,gBAAiBJ,EAAMD,KAA1D,SACI,uBAAMG,UAAU,OAAOG,SAdf,SAACC,GACbA,EAAEC,kBAaE,UACI,uBAAOL,UAAU,cAAcM,KAAK,OAAOC,KAAK,MAAMC,SAXjD,SAACJ,GACgB,IAA1BA,EAAEK,OAAOC,MAAMC,OACfZ,GAAS,SAAAa,GAAI,MAAK,CAACf,IAAKgB,EAAMT,EAAEK,OAAOC,QAAU,4CAEjDX,GAAS,SAAAa,GAAI,MAAK,CAACf,IAAK,UAQpB,wBAAQG,UAAU,eAAeO,KAAK,MAAtC,SAA6CT,EAAMD,YCfpDiB,MANf,WACE,OACI,cAAC,EAAD,KCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b92b094a.chunk.js","sourcesContent":["function hex2rgb(c) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(c);\n    return result ? `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})` : null;\n}\n\nexport default hex2rgb\n","import { useState } from 'react';\nimport valid from '../validate/validate';\n\nfunction Converter() {\nconst [color, setColor] = useState({\n    rgb: '',   \n})\n\n    const onCheck = (e) => {\n        e.preventDefault();\n    }\n\n    const onValide = (e) => {\n        if (e.target.value.length === 7) {\n            setColor(prev => ({rgb: valid(e.target.value) || 'Ошибка!'}))    \n        } else {\n            setColor(prev => ({rgb: ''}))\n        }\n    }\n\n    return (\n        <div className=\"container\" style={{backgroundColor: color.rgb}}>\n            <form className=\"form\" onSubmit={onCheck}>\n                <input className=\"input field\" type=\"text\" name=\"hex\" onChange={onValide}></input>\n                <output className=\"output field\" name=\"rgb\">{color.rgb}</output>\n            </form>    \n        </div>\n    )\n}\n\nexport default Converter","import './App.css';\nimport Converter from './components/converter/Converter';\n\nfunction App() {\n  return (\n      <Converter />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}